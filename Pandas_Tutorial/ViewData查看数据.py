import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dates=pd.date_range('20180101',periods=6)
df=pd.DataFrame(np.random.randn(6,4),index=dates,columns=list('ABCD'))
'''------查看框架的顶行和底行,使用函数head(n=5) tail(n=5)-----'''
print(df.head(1))#返回前n行，n默认值是5
print(df.tail(1))#返回最后n行，n默认值是5
'''-----------查看索引，列，和数据值,使用属性----------------'''
print(df.index)
# DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',
#                '2018-01-05', '2018-01-06'],
print(df.columns)
# Index(['A', 'B', 'C', 'D'], dtype='object')
print(df.values)
# [[ 1.70049467  0.58795061  0.9363136  -0.59785069]
#  [ 0.10577719 -0.60248981  0.04812157  1.20873517]
#  [ 1.2017409   2.76740046 -0.38132462  0.01458678]
#  [-0.2752068  -0.74346934 -1.08722924 -0.13788104]
#  [-0.53165176 -1.08037035 -0.71915156 -2.6294822 ]
#  [ 0.50660471 -1.45734622  0.87846053  1.03374241]]
'''-------------describe()方法显示数据的快速统计概要----------'''
print(df.describe())
#               A         B         C         D
# count  6.000000  6.000000  6.000000  6.000000
# mean  -0.485717 -0.268096  0.121346 -0.083812
# std    1.126180  1.269574  0.958807  0.688293
# min   -2.104372 -1.818939 -0.900112 -0.962438
# 25%   -1.142363 -1.212919 -0.718313 -0.384408
# 50%   -0.442850 -0.263887  0.118143 -0.103452
# 75%    0.231027  0.603877  0.887156 -0.004561
# max    0.995648  1.374268  1.245542  1.116129
'''----------------------df.T 属性，转置------------------'''
df.T
#    2018-01-01  2018-01-02  2018-01-03  2018-01-04  2018-01-05  2018-01-06
# A   -0.107479   -0.272746    0.644192   -0.375908   -0.350232    0.738841
# B   -1.613069    0.962656   -0.725665   -0.426917   -0.351814    0.255926
# C    1.004214   -1.695619    0.454554   -1.143916   -0.203392    0.215554
# D   -0.536726   -0.424927   -0.401554   -2.618840    0.515411    0.368206
'''-----------------------按轴排序-------------------------'''
print(df)
#                    A         B         C         D
# 2018-01-01 -1.783356  1.231701  0.120841  0.334902
# 2018-01-02  0.446141 -0.711119  0.174895 -0.143212
# 2018-01-03  0.520509  0.885519  0.525349  0.014050
# 2018-01-04  0.210748  1.431080 -0.568672 -1.489344
# 2018-01-05 -1.719176 -1.111506  0.478262 -1.643028
# 2018-01-06  0.038795  2.249270 -1.392892 -0.391890
print(df.sort_index(axis=1,ascending=False))
#                    D         C         B         A
# 2018-01-01  0.334902  0.120841  1.231701 -1.783356
# 2018-01-02 -0.143212  0.174895 -0.711119  0.446141
# 2018-01-03  0.014050  0.525349  0.885519  0.520509
# 2018-01-04 -1.489344 -0.568672  1.431080  0.210748
# 2018-01-05 -1.643028  0.478262 -1.111506 -1.719176
# 2018-01-06 -0.391890 -1.392892  2.249270  0.038795
'''axis=0 vertial axis=1 horizontal'''
'''--------------------按值排序--------------------------------'''
print(df.sort_values(by='B'))
#                    A         B         C         D
# 2018-01-02  0.938320 -1.235243 -1.243016  0.976452
# 2018-01-01  2.121305 -0.772947 -0.665176  1.171103
# 2018-01-06  0.005448 -0.568366  1.032091  0.596721
# 2018-01-04 -0.316200 -0.241392 -0.167632  0.461453
# 2018-01-03  1.283207 -0.237065  0.147794  0.974249
# 2018-01-05 -0.873962 -0.152854 -0.079639 -0.467205

